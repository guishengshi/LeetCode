; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24210.0 

	TITLE	F:\Git\LeetCode\LeetCode\LeetCode\AddTwoNums.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	_addTwoNumbers
PUBLIC	_getNodeList
PUBLIC	_main
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	??_C@_04BBDFLMDN@?5?9?$DO?5?$AA@		; `string'
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_04BBDFLMDN@?5?9?$DO?5?$AA@
CONST	SEGMENT
??_C@_04BBDFLMDN@?5?9?$DO?5?$AA@ DB ' -> ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\git\leetcode\leetcode\leetcode\addtwonums.c
;	COMDAT _main
_TEXT	SEGMENT
_res$ = -64						; size = 4
_l2$ = -52						; size = 4
_l1$ = -40						; size = 4
_arr2$ = -28						; size = 8
_arr1$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_main	PROC						; COMDAT

; 69   : int main() {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 70   : 	int arr1[] = {1};

	mov	DWORD PTR _arr1$[ebp], 1

; 71   : 	int arr2[] = {9, 9};

	mov	DWORD PTR _arr2$[ebp], 9
	mov	DWORD PTR _arr2$[ebp+4], 9

; 72   : 	struct ListNode* l1 = getNodeList(arr1, 1);

	push	1
	lea	eax, DWORD PTR _arr1$[ebp]
	push	eax
	call	_getNodeList
	add	esp, 8
	mov	DWORD PTR _l1$[ebp], eax

; 73   : 	struct ListNode* l2 = getNodeList(arr2, 2);

	push	2
	lea	eax, DWORD PTR _arr2$[ebp]
	push	eax
	call	_getNodeList
	add	esp, 8
	mov	DWORD PTR _l2$[ebp], eax

; 74   : 
; 75   : 	struct ListNode* res = addTwoNumbers(l1, l2);

	mov	eax, DWORD PTR _l2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _l1$[ebp]
	push	ecx
	call	_addTwoNumbers
	add	esp, 8
	mov	DWORD PTR _res$[ebp], eax

; 76   : 	if (res) {

	cmp	DWORD PTR _res$[ebp], 0
	je	SHORT $LN1@main
$LN2@main:

; 77   : 		while (res)

	cmp	DWORD PTR _res$[ebp], 0
	je	SHORT $LN3@main

; 78   : 		{
; 79   : 			printf("%d", res->val);

	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	call	_printf
	add	esp, 8

; 80   : 			if (res->next) {

	mov	eax, DWORD PTR _res$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN5@main

; 81   : 				printf(" -> ");

	push	OFFSET ??_C@_04BBDFLMDN@?5?9?$DO?5?$AA@
	call	_printf
	add	esp, 4
$LN5@main:

; 82   : 			}
; 83   : 			res = res->next;

	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _res$[ebp], ecx

; 84   : 		}

	jmp	SHORT $LN2@main
$LN3@main:

; 85   : 		free(res);

	mov	esi, esp
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 86   : 		free(l1);

	mov	esi, esp
	mov	eax, DWORD PTR _l1$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 87   : 		free(l2);

	mov	esi, esp
	mov	eax, DWORD PTR _l2$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@main:

; 88   : 	}
; 89   : }

	xor	eax, eax
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@main
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@main:
	DD	2
	DD	$LN9@main
$LN9@main:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN7@main
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN8@main
$LN8@main:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	50					; 00000032H
	DB	0
$LN7@main:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	49					; 00000031H
	DB	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\git\leetcode\leetcode\leetcode\addtwonums.c
;	COMDAT _getNodeList
_TEXT	SEGMENT
_i$1 = -44						; size = 4
_temp$ = -32						; size = 4
_pre$ = -20						; size = 4
_res$ = -8						; size = 4
_arr$ = 8						; size = 4
_length$ = 12						; size = 4
_getNodeList PROC					; COMDAT

; 47   : struct ListNode* getNodeList(int* arr, int length) {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 48   : 	struct ListNode* res = 0;

	mov	DWORD PTR _res$[ebp], 0

; 49   : 	struct ListNode* pre = 0;

	mov	DWORD PTR _pre$[ebp], 0

; 50   : 	struct ListNode* temp = 0;

	mov	DWORD PTR _temp$[ebp], 0

; 51   : 	for (int i = 0; i < length; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@getNodeLis
$LN2@getNodeLis:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@getNodeLis:
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	SHORT $LN3@getNodeLis

; 52   : 		temp = malloc(sizeof(struct ListNode));

	mov	esi, esp
	push	8
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _temp$[ebp], eax

; 53   : 		temp->val = arr[i];

	mov	eax, DWORD PTR _temp$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR _arr$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [eax], ecx

; 54   : 		temp->next = 0;

	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax+4], 0

; 55   : 		if (pre) {

	cmp	DWORD PTR _pre$[ebp], 0
	je	SHORT $LN5@getNodeLis

; 56   : 			pre->next = temp;

	mov	eax, DWORD PTR _pre$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 57   : 			pre = temp;

	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR _pre$[ebp], eax

; 58   : 		}

	jmp	SHORT $LN6@getNodeLis
$LN5@getNodeLis:

; 59   : 		else
; 60   : 		{
; 61   : 			pre = temp;

	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR _pre$[ebp], eax

; 62   : 			res = pre;

	mov	eax, DWORD PTR _pre$[ebp]
	mov	DWORD PTR _res$[ebp], eax
$LN6@getNodeLis:

; 63   : 		}
; 64   : 	}

	jmp	SHORT $LN2@getNodeLis
$LN3@getNodeLis:

; 65   : 	return res;

	mov	eax, DWORD PTR _res$[ebp]

; 66   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_getNodeList ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\git\leetcode\leetcode\leetcode\addtwonums.c
;	COMDAT _addTwoNumbers
_TEXT	SEGMENT
tv86 = -272						; size = 4
tv129 = -268						; size = 4
tv94 = -268						; size = 4
tv83 = -268						; size = 4
_sum$1 = -68						; size = 4
_quotient$ = -56					; size = 4
_temp$ = -44						; size = 4
_res$ = -32						; size = 4
_p2$ = -20						; size = 4
_p1$ = -8						; size = 4
_l1$ = 8						; size = 4
_l2$ = 12						; size = 4
_addTwoNumbers PROC					; COMDAT

; 21   : struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {

	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 22   : 	struct ListNode* p1 = l1;

	mov	eax, DWORD PTR _l1$[ebp]
	mov	DWORD PTR _p1$[ebp], eax

; 23   : 	struct ListNode* p2 = l2;

	mov	eax, DWORD PTR _l2$[ebp]
	mov	DWORD PTR _p2$[ebp], eax

; 24   : 	struct ListNode* res = malloc(sizeof(struct ListNode));

	mov	esi, esp
	push	8
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _res$[ebp], eax

; 25   : 	res->next = 0;

	mov	eax, DWORD PTR _res$[ebp]
	mov	DWORD PTR [eax+4], 0

; 26   : 	struct ListNode* temp = res;

	mov	eax, DWORD PTR _res$[ebp]
	mov	DWORD PTR _temp$[ebp], eax

; 27   : 	int quotient = 0;

	mov	DWORD PTR _quotient$[ebp], 0
$LN2@addTwoNumb:

; 28   : 	while ((p1 || p2 || quotient))

	cmp	DWORD PTR _p1$[ebp], 0
	jne	SHORT $LN4@addTwoNumb
	cmp	DWORD PTR _p2$[ebp], 0
	jne	SHORT $LN4@addTwoNumb
	cmp	DWORD PTR _quotient$[ebp], 0
	je	$LN3@addTwoNumb
$LN4@addTwoNumb:

; 29   : 	{
; 30   : 		temp->next = malloc(sizeof(struct ListNode));

	mov	esi, esp
	push	8
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 31   : 		temp = temp->next;

	mov	eax, DWORD PTR _temp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _temp$[ebp], ecx

; 32   : 		temp->next = 0;

	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax+4], 0

; 33   : 		int sum = (p1 ? p1->val : 0) + (p2 ? p2->val : 0) + quotient;

	cmp	DWORD PTR _p1$[ebp], 0
	je	SHORT $LN6@addTwoNumb
	mov	eax, DWORD PTR _p1$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv83[ebp], ecx
	jmp	SHORT $LN7@addTwoNumb
$LN6@addTwoNumb:
	mov	DWORD PTR tv83[ebp], 0
$LN7@addTwoNumb:
	cmp	DWORD PTR _p2$[ebp], 0
	je	SHORT $LN8@addTwoNumb
	mov	edx, DWORD PTR _p2$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv86[ebp], eax
	jmp	SHORT $LN9@addTwoNumb
$LN8@addTwoNumb:
	mov	DWORD PTR tv86[ebp], 0
$LN9@addTwoNumb:
	mov	ecx, DWORD PTR tv83[ebp]
	add	ecx, DWORD PTR tv86[ebp]
	add	ecx, DWORD PTR _quotient$[ebp]
	mov	DWORD PTR _sum$1[ebp], ecx

; 34   : 		temp->val = sum % 10;

	mov	eax, DWORD PTR _sum$1[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], edx

; 35   : 		quotient = sum / 10;

	mov	eax, DWORD PTR _sum$1[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	DWORD PTR _quotient$[ebp], eax

; 36   : 		p1 = p1 ? p1->next : 0;

	cmp	DWORD PTR _p1$[ebp], 0
	je	SHORT $LN10@addTwoNumb
	mov	eax, DWORD PTR _p1$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv94[ebp], ecx
	jmp	SHORT $LN11@addTwoNumb
$LN10@addTwoNumb:
	mov	DWORD PTR tv94[ebp], 0
$LN11@addTwoNumb:
	mov	edx, DWORD PTR tv94[ebp]
	mov	DWORD PTR _p1$[ebp], edx

; 37   : 		p2 = p2 ? p2->next : 0;

	cmp	DWORD PTR _p2$[ebp], 0
	je	SHORT $LN12@addTwoNumb
	mov	eax, DWORD PTR _p2$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv129[ebp], ecx
	jmp	SHORT $LN13@addTwoNumb
$LN12@addTwoNumb:
	mov	DWORD PTR tv129[ebp], 0
$LN13@addTwoNumb:
	mov	edx, DWORD PTR tv129[ebp]
	mov	DWORD PTR _p2$[ebp], edx

; 38   : 		
; 39   : 	}

	jmp	$LN2@addTwoNumb
$LN3@addTwoNumb:

; 40   : 	temp = res;

	mov	eax, DWORD PTR _res$[ebp]
	mov	DWORD PTR _temp$[ebp], eax

; 41   : 	res = res->next;

	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _res$[ebp], ecx

; 42   : 	free(temp);

	mov	esi, esp
	mov	eax, DWORD PTR _temp$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 43   : 	return res;

	mov	eax, DWORD PTR _res$[ebp]

; 44   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_addTwoNumbers ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 950  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 951  :     int _Result;
; 952  :     va_list _ArgList;
; 953  :     __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 954  :     _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR __Format$[ebp]
	push	ecx
	mov	esi, esp
	push	1
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	__vfprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax

; 955  :     __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 956  :     return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 957  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 638  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 639  :     return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	mov	esi, esp
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 640  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 73   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
